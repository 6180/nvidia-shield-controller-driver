From d11bd4dbdd7fe38eb962f203e865b82c579ffb3a Mon Sep 17 00:00:00 2001
From: Fabian Schaffert <fabian@schaffert.cc>
Date: Mon, 11 Jul 2016 23:21:59 +0200
Subject: [PATCH 3/4] staging: ozwpan: Consult skb->len before casting packet
 data

---
 drivers/staging/ozwpan/ozcdev.c    |  3 +++
 drivers/staging/ozwpan/ozproto.c   | 33 +++++++++++++++++++++++++--------
 drivers/staging/ozwpan/ozusbsvc1.c | 16 +++++++++++-----
 3 files changed, 39 insertions(+), 13 deletions(-)

diff --git a/drivers/staging/ozwpan/ozcdev.c b/drivers/staging/ozwpan/ozcdev.c
index da0e1fd..fa28626 100644
--- a/drivers/staging/ozwpan/ozcdev.c
+++ b/drivers/staging/ozwpan/ozcdev.c
@@ -511,6 +511,9 @@ void oz_cdev_rx(struct oz_pd *pd, struct oz_elt *elt)
 		return;
 	}
 
+	if(elt->length < sizeof(struct oz_app_hdr))
+		goto out;
+
 	app_hdr = (struct oz_app_hdr *)(elt+1);
 	/* If sequence number is non-zero then check it is not a duplicate.
 	 */
diff --git a/drivers/staging/ozwpan/ozproto.c b/drivers/staging/ozwpan/ozproto.c
index 13fa2ff..b712595 100644
--- a/drivers/staging/ozwpan/ozproto.c
+++ b/drivers/staging/ozwpan/ozproto.c
@@ -164,14 +164,18 @@ static struct oz_pd *oz_connect_req(struct oz_pd *cur_pd, struct oz_elt *elt,
 			const u8 *pd_addr, struct net_device *net_dev)
 {
 	struct oz_pd *pd;
-	struct oz_elt_connect_req *body =
-			(struct oz_elt_connect_req *)(elt+1);
+	struct oz_elt_connect_req *body;
 	u8 rsp_status = OZ_STATUS_SUCCESS;
 	u8 stop_needed = 0;
 	u16 new_apps = g_apps;
 	struct net_device *old_net_dev = NULL;
 	struct oz_pd *free_pd = NULL;
 
+	if (elt->length < sizeof(struct oz_elt_connect_req))
+		return NULL;
+
+	body = (struct oz_elt_connect_req *)(elt+1);
+
 	if (cur_pd) {
 		pd = cur_pd;
 		spin_lock_bh(&g_polling_lock);
@@ -343,13 +347,17 @@ static void oz_rx_frame(struct sk_buff *skb)
 	void *oz_hdr_buffer = NULL;
 	void *oz_data_buffer = NULL;
 
+	length = skb->len;
+	if (sizeof(struct oz_hdr) > length)
+		goto done;
+
 	if (skb_is_nonlinear(skb)) {
-		oz_hdr_buffer = kmalloc(sizeof(oz_hdr), GFP_KERNEL);
+		oz_hdr_buffer = kmalloc(sizeof(struct oz_hdr), GFP_KERNEL);
 		if (!oz_hdr_buffer)
 			goto done;
 
 		oz_hdr = (struct oz_hdr *)skb_header_pointer(
-			skb, 0, sizeof(oz_hdr), oz_hdr_buffer);
+			skb, 0, sizeof(struct oz_hdr), oz_hdr_buffer);
 	} else {
 		oz_hdr = (struct oz_hdr *)skb_network_header(skb);
 	}
@@ -358,7 +366,6 @@ static void oz_rx_frame(struct sk_buff *skb)
 
 	oz_dbg(ON, "RX frame PN=0x%x LPN=0x%x control=0x%x\n",
 	       oz_hdr->pkt_num, oz_hdr->last_pkt_num, oz_hdr->control);
-	length = skb->len;
 
 	/* Check the version field */
 	if (oz_get_prot_ver(oz_hdr->control) != OZ_PROTOCOL_VERSION) {
@@ -405,6 +412,8 @@ static void oz_rx_frame(struct sk_buff *skb)
 	}
 
 	length -= sizeof(struct oz_hdr);
+	if (sizeof(struct oz_elt) > length)
+		goto done;
 
 	if (skb_is_nonlinear(skb)) {
 		oz_data_buffer = kmalloc(length, GFP_KERNEL);
@@ -439,6 +448,9 @@ static void oz_rx_frame(struct sk_buff *skb)
 		case OZ_ELT_UPDATE_PARAM_REQ: {
 				struct oz_elt_update_param *body =
 					(struct oz_elt_update_param *)(elt + 1);
+
+				if (elt->length < sizeof(struct oz_elt_update_param))
+					goto done;
 				oz_dbg(ON, "RX: OZ_ELT_UPDATE_PARAM_REQ\n");
 				if (pd && (pd->state & OZ_PD_S_CONNECTED)) {
 					spin_lock(&g_polling_lock);
@@ -449,8 +461,11 @@ static void oz_rx_frame(struct sk_buff *skb)
 			}
 			break;
 		case OZ_ELT_FAREWELL_REQ: {
-				struct oz_elt_farewell *body =
+				struct oz_elt_farewell *body = 
 					(struct oz_elt_farewell *)(elt + 1);
+
+				if (elt->length < sizeof(struct oz_elt_farewell) - 1)
+					goto done;
 				oz_dbg(ON, "RX: OZ_ELT_FAREWELL_REQ\n");
 				oz_add_farewell(pd, body->ep_num,
 					body->index, body->report,
@@ -459,8 +474,10 @@ static void oz_rx_frame(struct sk_buff *skb)
 			break;
 		case OZ_ELT_APP_DATA:
 			if (pd && (pd->state & OZ_PD_S_CONNECTED)) {
-				struct oz_app_hdr *app_hdr =
-					(struct oz_app_hdr *)(elt+1);
+				struct oz_app_hdr *app_hdr = (struct oz_app_hdr *)(elt+1);
+
+				if (elt->length < sizeof(struct oz_app_hdr))
+					goto done;
 				if (dup)
 					break;
 				oz_handle_app_elt(pd, app_hdr->app_id, elt);
diff --git a/drivers/staging/ozwpan/ozusbsvc1.c b/drivers/staging/ozwpan/ozusbsvc1.c
index b6cfecb..a7c744e 100644
--- a/drivers/staging/ozwpan/ozusbsvc1.c
+++ b/drivers/staging/ozwpan/ozusbsvc1.c
@@ -320,6 +320,8 @@ static void oz_usb_handle_ep_data(struct oz_usb_ctx *usb_ctx,
 	struct oz_usb_hdr *usb_hdr, int len)
 {
 	struct oz_data *data_hdr = (struct oz_data *)usb_hdr;
+	if (len < sizeof(struct oz_data))
+		return;
 
 	switch (data_hdr->format) {
 	case OZ_DATA_F_MULTIPLE_FIXED: {
@@ -377,6 +379,9 @@ void oz_usb_rx(struct oz_pd *pd, struct oz_elt *elt)
 	struct oz_usb_hdr *usb_hdr = (struct oz_usb_hdr *)(elt + 1);
 	struct oz_usb_ctx *usb_ctx;
 
+	if (elt->length < sizeof(struct oz_usb_hdr))
+		return;
+
 	spin_lock_bh(&pd->app_lock[OZ_APPID_USB]);
 	usb_ctx = (struct oz_usb_ctx *)pd->app_ctx[OZ_APPID_USB];
 	if (usb_ctx)
@@ -403,7 +408,7 @@ void oz_usb_rx(struct oz_pd *pd, struct oz_elt *elt)
 			u8 data_len;
 
 			if (elt->length < sizeof(struct oz_get_desc_rsp) - 1)
-				break;
+				goto done;
 			data_len = elt->length -
 					(sizeof(struct oz_get_desc_rsp) - 1);
 			offs = le16_to_cpu(get_unaligned(&body->offset));
@@ -418,6 +423,8 @@ void oz_usb_rx(struct oz_pd *pd, struct oz_elt *elt)
 	case OZ_SET_CONFIG_RSP: {
 			struct oz_set_config_rsp *body =
 				(struct oz_set_config_rsp *)usb_hdr;
+			if (elt->length < sizeof(struct oz_set_config_rsp))
+				goto done;
 			oz_hcd_control_cnf(usb_ctx->hport, body->req_id,
 				body->rcode, NULL, 0);
 		}
@@ -425,6 +432,8 @@ void oz_usb_rx(struct oz_pd *pd, struct oz_elt *elt)
 	case OZ_SET_INTERFACE_RSP: {
 			struct oz_set_interface_rsp *body =
 				(struct oz_set_interface_rsp *)usb_hdr;
+			if (elt->length < sizeof(struct oz_set_interface_rsp))
+				goto done;
 			oz_hcd_control_cnf(usb_ctx->hport,
 				body->req_id, body->rcode, NULL, 0);
 		}
@@ -432,11 +441,8 @@ void oz_usb_rx(struct oz_pd *pd, struct oz_elt *elt)
 	case OZ_VENDOR_CLASS_RSP: {
 			struct oz_vendor_class_rsp *body =
 				(struct oz_vendor_class_rsp *)usb_hdr;
-
-			if (elt->length <
-			    sizeof(struct oz_vendor_class_rsp) - 1)
+			if (elt->length < sizeof(struct oz_vendor_class_rsp) - 1)
 				break;
-
 			oz_hcd_control_cnf(usb_ctx->hport, body->req_id,
 				body->rcode, body->data, elt->length-
 				sizeof(struct oz_vendor_class_rsp)+1);
-- 
2.7.3

